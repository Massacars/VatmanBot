function coinFlip() {
	return Math.round(Math.random() * (VatmanSayLenght - 0) + 0);
};

function coinHandFlip() {
	return (Math.floor(Math.random() * 2) === 0);
};

function messageList(array, lenght){
	var phrasesList = '';
	for (i = 0; i < lenght; i++){
		phrasesList = phrasesList + ('\nID:'+ i + ' - ' + array[i]);
	}
	return phrasesList;
};

module.exports = (bot, config) => {

const VatmanSay = config.vatmansay;
const VatmanSayLenght = Object.keys(VatmanSay).length;

	bot.onText(/\/start/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		await bot.sendMessage(userId, config.phrases.hello);
	});

	bot.onText(/\/help/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		if (msg.chat.type == 'group' || msg.chat.type == 'supergroup') {
			await bot.sendMessage(chatId, config.phrases.help);
		} else {
			await bot.sendMessage(userId, config.phrases.help);
		}
	});

	bot.onText(/\/ping/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		if (msg.chat.type == 'group' || msg.chat.type == 'supergroup') {
			await bot.sendMessage(chatId, config.phrases.ping);
		} else if (msg.chat.type == 'private') {
			await bot.sendMessage(userId, config.phrases.ping);
		}
	});

	bot.onText(/\/say/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		const messageId = msg.message_id;
		var VatmanTalkMsgID = coinFlip();
		if (VatmanSay[VatmanTalkMsgID] != '' && VatmanSay[VatmanTalkMsgID]) {
			if (msg.chat.type == 'group' || msg.chat.type == 'supergroup') {			
				if (msg.reply_to_message) {				
					await bot.deleteMessage(chatId, messageId).catch((error) => {			
						if(!error.response.body.ok){
							bot.sendMessage(chatId, config.phrases.gimmeadmin);
						}										
					});
					
				};
				await bot.sendMessage(chatId, VatmanSay[VatmanTalkMsgID]);
			} else if (msg.chat.type == 'private') {
				await bot.sendMessage(userId, VatmanSay[VatmanTalkMsgID]);
			}
		} else {
			if (msg.chat.type == 'group' || msg.chat.type == 'supergroup') {
				await bot.sendMessage(chatId, config.phrases.error);
			} else if (msg.chat.type == 'private') {
				await bot.sendMessage(userId, config.phrases.error);
			}
		}
	});

	bot.onText(/\/phrases/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		
		if (msg.chat.type == 'private') {		
			await bot.sendMessage(userId, messageList(VatmanSay, VatmanSayLenght));
		}
	});

	bot.onText(/\/coin/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		if (coinHandFlip()) {
			if (msg.chat.type == 'group' || msg.chat.type == 'supergroup') {
				await bot.sendMessage(chatId, config.phrases.eagle);
			} else if (msg.chat.type == 'private') {
				await bot.sendMessage(userId, config.phrases.eagle);
			}
		} else {
			if (msg.chat.type == 'group' || msg.chat.type == 'supergroup') {
				await bot.sendMessage(chatId, config.phrases.noteagle);
			} else if (msg.chat.type == 'private') {
				await bot.sendMessage(userId, config.phrases.noteagle);
			}
		}
	});

	bot.onText(/\/money/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		const messageId = msg.message_id;
		if (msg.chat.type == 'group' || msg.chat.type == 'supergroup'){
			moneyMessage = await bot.sendMessage(chatId, "–í @StartupWarsChat –Ω–∞—á–∞–ª–∞—Å—å –ª–æ—Ç–µ—Ä–µ—è!üï∏\n\n*–°–µ—Ç—å->üé™–ö–∞–∑–∏–Ω–æ->ü§ë–õ–æ—Ç–µ—Ä–µ—è* \n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ —á–∞—Ç–µ –≤ 21:15üéâ", {parse_mode:"Markdown"});			
			bot.pinChatMessage(chatId, moneyMessage.message_id);
			bot.deleteMessage(chatId, messageId);
		}
	});

	bot.onText(/\/eat/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		const messageId = msg.message_id;
		if (msg.chat.type == 'group' || msg.chat.type == 'supergroup'){
			warnMessage = await bot.sendMessage(chatId, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –û—Ç–¥–µ–ª–∞ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ <b>[–û–ú]</b> üçï  \n\n –û–≥—Ä–æ–º–Ω–∞—è –ø—Ä–æ—Å—å–±–∞: \n\nüóÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: \n/compact, /stock => @HendricksBot \n\nüîã –†–µ–≥—É–ª—è—Ä–Ω–æ –∫—É—à–∞—Ç—å:\n/to_eat => –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç <b>200</b>. \n\n‚úèÔ∏è –ü–æ –∂–µ–ª–∞–Ω–∏—é: \n/setname => –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ —Ç–µ–≥ <b>-OM-</b> \n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ. \n/AVE_PP \n/AVE_OM", {parse_mode:"HTML"});
			bot.pinChatMessage(chatId, warnMessage.message_id);
			bot.deleteMessage(chatId, messageId);
		}
	});

	bot.onText(/\/list/, async function(msg, match) {
		const userId = msg.from.id;
		const chatId = msg.chat.id;
		
		if (msg.chat.type == 'private') {		
			await bot.sendMessage(userId, "/phrases - –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /say \n/money - –ü—ñ–Ω –Ω–∞ –ª–æ—Ç–µ—Ä–µ—é\n/eat - –ü—ñ–Ω –Ω–∞ —Ä–µ–ø–æ—Ä—Ç–∏ —Ç–∞ —ó–∂—É");
		}
	});

}

